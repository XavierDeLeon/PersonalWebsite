[{"C:\\Repos\\PersonalWebsite\\src\\index.js":"1","C:\\Repos\\PersonalWebsite\\src\\reportWebVitals.js":"2","C:\\Repos\\PersonalWebsite\\src\\components\\App.js":"3","C:\\Repos\\PersonalWebsite\\src\\components\\about\\about.js":"4","C:\\Repos\\PersonalWebsite\\src\\components\\music\\music.js":"5","C:\\Repos\\PersonalWebsite\\src\\components\\music\\music-player.js":"6","C:\\Repos\\PersonalWebsite\\src\\components\\music\\visualizer.js":"7","C:\\Repos\\PersonalWebsite\\src\\components\\music\\visualizerAnimations.js":"8","C:\\Repos\\PersonalWebsite\\src\\components\\music\\custom-controls.js":"9"},{"size":528,"mtime":1608269241732,"results":"10","hashOfConfig":"11"},{"size":375,"mtime":1608268792280,"results":"12","hashOfConfig":"11"},{"size":2018,"mtime":1643323621738,"results":"13","hashOfConfig":"11"},{"size":1271,"mtime":1642966734653,"results":"14","hashOfConfig":"11"},{"size":296,"mtime":1643134150060,"results":"15","hashOfConfig":"11"},{"size":2715,"mtime":1643236506581,"results":"16","hashOfConfig":"11"},{"size":4564,"mtime":1643319819695,"results":"17","hashOfConfig":"11"},{"size":2201,"mtime":1643214576028,"results":"18","hashOfConfig":"11"},{"size":7948,"mtime":1643235352875,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"vljxmp",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Repos\\PersonalWebsite\\src\\index.js",[],["41","42"],"C:\\Repos\\PersonalWebsite\\src\\reportWebVitals.js",[],"C:\\Repos\\PersonalWebsite\\src\\components\\App.js",[],"C:\\Repos\\PersonalWebsite\\src\\components\\about\\about.js",[],"C:\\Repos\\PersonalWebsite\\src\\components\\music\\music.js",[],"C:\\Repos\\PersonalWebsite\\src\\components\\music\\music-player.js",["43","44","45"],"C:\\Repos\\PersonalWebsite\\src\\components\\music\\visualizer.js",["46"],"import React from \"react\";\r\nimport \"./visualizer.css\";\r\nimport * as animations from \"./visualizerAnimations\"\r\nexport default class Visualizer extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.ctx = null;\r\n        this.audioElem = null;\r\n        this.audioSrc = null;\r\n        this.analyzer = null;\r\n        this.contextInitialized = false;\r\n        this.animations = animations.visualizerAnimations();\r\n        this.colorMap = new Map();\r\n        this.state = {\r\n            visualizerStyle: props.visualizerStyle\r\n        };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (document.getElementById(\"src\") && !this.contextInitialized) {\r\n            this.audioElem = document.getElementById(\"src\");\r\n            this.visualizeAudio(this.audioElem, document.getElementById(\"visualizer\"));\r\n            this.contextInitialized = true;\r\n            window.addEventListener(\"resize\", () => {\r\n                //resize\r\n                document.getElementById(\"visualizer\").width = document.body.scrollWidth;\r\n                document.getElementById(\"visualizer\").height = document.body.scrollHeight;\r\n            })\r\n        }\r\n    }\r\n\r\n    initAudioContext(audioElem, canvas){\r\n        console.log(\"initializing context\");\r\n        canvas.width = document.body.scrollWidth;\r\n        canvas.height = document.body.scrollHeight;\r\n        this.ctx = canvas.getContext('2d');\r\n        let audioContext;\r\n        if (audioContext == undefined) {\r\n            audioContext = new AudioContext();\r\n        }\r\n        this.audioSrc = audioContext.createMediaElementSource(audioElem);\r\n        this.analyzer = audioContext.createAnalyser();\r\n        this.audioSrc.connect(this.analyzer);\r\n        this.analyzer.connect(audioContext.destination);\r\n    }\r\n\r\n    visualizeAudio(audioElem, canvas, animationStyle = \"default\"){\r\n        this.initAudioContext(audioElem, canvas);\r\n        this.analyzer.fftSize = 128;\r\n    \r\n        const bufferLength = this.analyzer.frequencyBinCount;\r\n        const dataArray = new Uint8Array(bufferLength);\r\n    \r\n        const barWidth = canvas.width/bufferLength;\r\n        let x;\r\n        let _this = this;\r\n    \r\n        function animate() {\r\n            x = 0;\r\n            _this.ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n            //color of background\r\n            _this.ctx.fillStyle = `rgb(${_this.rgb.r}, ${_this.rgb.g}, ${_this.rgb.b})`;\r\n            _this.ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            _this.analyzer.getByteFrequencyData(dataArray);\r\n            _this.animations[animationStyle](_this.ctx, canvas, bufferLength, x, barWidth, dataArray);\r\n            requestAnimationFrame(animate);\r\n        }\r\n        animate();\r\n    }\r\n\r\n    getAverageRGB(imgEl) {\r\n    \r\n        let blockSize = 5, // only visit every 5 pixels\r\n            defaultRGB = {r:0,g:0,b:0}, // for non-supporting envs\r\n            canvas = document.createElement('canvas'),\r\n            context = canvas.getContext && canvas.getContext('2d'),\r\n            data, width, height,\r\n            i = -4,\r\n            length,\r\n            rgb = {r:0,g:0,b:0},\r\n            count = 0;\r\n\r\n        if (!context) {\r\n            return defaultRGB;\r\n        }\r\n        \r\n        height = canvas.height = imgEl.offsetHeight || imgEl.height;\r\n        width = canvas.width = imgEl.offsetWidth || imgEl.width;\r\n        \r\n        context.drawImage(imgEl, 0, 0);\r\n        \r\n        try {\r\n            data = context.getImageData(0, 0, width, height);\r\n        } catch(e) {\r\n            console.log(\"not working\");\r\n            return defaultRGB;\r\n        }\r\n        \r\n        length = data.data.length;\r\n        \r\n        while ( (i += blockSize * 4) < length ) {\r\n            ++count;\r\n            rgb.r += data.data[i];\r\n            rgb.g += data.data[i+1];\r\n            rgb.b += data.data[i+2];\r\n        }\r\n\r\n        // ~~ used to floor values\r\n        rgb.r = ~~(rgb.r/count);\r\n        rgb.g = ~~(rgb.g/count);\r\n        rgb.b = ~~(rgb.b/count);\r\n\r\n        canvas.remove();\r\n\r\n        return rgb;\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n        document.getElementById(\"album-art\").onload = () => {\r\n            let key = document.getElementById(\"album-art\").src;\r\n            if (!this.colorMap.get(key)){\r\n                this.colorMap.set(key, this.getAverageRGB(document.getElementById(\"album-art\")));\r\n            } \r\n            this.rgb = this.colorMap.get(key);\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return <canvas id=\"visualizer\" className=\"visualizer\"></canvas>;\r\n    }\r\n\r\n}","C:\\Repos\\PersonalWebsite\\src\\components\\music\\visualizerAnimations.js",["47"],"function visualizerAnimations() {\r\n    let func = null;\r\n\r\n    return {\r\n        default: (ctx, canvas, bufferLength, x, barWidth, dataArray) => {\r\n            let originalX = x;\r\n            let topLeftX = (canvas.width / 2);\r\n            let topRightX = originalX + (canvas.width / 2);\r\n            let bottomRightX = originalX + (canvas.width / 2);\r\n            let bottomLeftX = (canvas.width / 2);\r\n\r\n            for (let i = 0; i < bufferLength; i++){\r\n                let barHeight = dataArray[i];\r\n                ctx.fillStyle = 'white';\r\n                //top right\r\n                ctx.fillRect(\r\n                    topRightX, // x\r\n                    canvas.height / 2, // y start from bottom of screen\r\n                    barWidth * 0.5, // width\r\n                    (barHeight * -1) * 0.5// height is multiplied by negative to go upwards\r\n                );\r\n                //top left\r\n                ctx.fillRect(\r\n                    topLeftX, // x\r\n                    canvas.height / 2, // y start from bottom of screen\r\n                    barWidth * 0.5, // width\r\n                    (barHeight * -1) * 0.5// height is multiplied by negative to go upwards\r\n                );\r\n\r\n                // REFLECTION\r\n                ctx.fillStyle = `rgba(255, 255, 255, 0.5)`;\r\n\r\n                //bottom right\r\n                ctx.fillRect(\r\n                    bottomRightX, // x\r\n                    canvas.height / 2, // y start from bottom of screen\r\n                    barWidth * 0.5, // width\r\n                    barHeight * 0.5// height\r\n                );\r\n\r\n                //bottom LEFT\r\n                ctx.fillRect(\r\n                    bottomLeftX, // x\r\n                    canvas.height / 2, // y start from bottom of screen\r\n                    barWidth * 0.5, // width\r\n                    barHeight * 0.5// height\r\n                );\r\n\r\n                topRightX += barWidth * 0.5 + 5; // add gap\r\n                topLeftX -= barWidth * 0.5 + 5; // add gap\r\n                bottomRightX += barWidth * 0.5 + 5; // add gap\r\n                bottomLeftX -= barWidth * 0.5 + 5; // add gap\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    visualizerAnimations\r\n}","C:\\Repos\\PersonalWebsite\\src\\components\\music\\custom-controls.js",["48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":10,"nodeType":"55","messageId":"56","endLine":1,"endColumn":16},{"ruleId":"53","severity":1,"message":"57","line":1,"column":18,"nodeType":"55","messageId":"56","endLine":1,"endColumn":27},{"ruleId":"53","severity":1,"message":"58","line":1,"column":29,"nodeType":"55","messageId":"56","endLine":1,"endColumn":37},{"ruleId":"59","severity":1,"message":"60","line":30,"column":26,"nodeType":"61","messageId":"62","endLine":30,"endColumn":28},{"ruleId":"53","severity":1,"message":"63","line":2,"column":9,"nodeType":"55","messageId":"56","endLine":2,"endColumn":13},{"ruleId":"64","severity":1,"message":"65","line":177,"column":21,"nodeType":"66","endLine":177,"endColumn":77},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'func' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]