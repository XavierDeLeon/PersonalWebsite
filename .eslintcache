[{"C:\\Repos\\PersonalWebsite\\src\\index.js":"1","C:\\Repos\\PersonalWebsite\\src\\reportWebVitals.js":"2","C:\\Repos\\PersonalWebsite\\src\\components\\App.js":"3","C:\\Repos\\PersonalWebsite\\src\\components\\about\\about.js":"4","C:\\Repos\\PersonalWebsite\\src\\components\\music\\music.js":"5","C:\\Repos\\PersonalWebsite\\src\\components\\music\\music-player.js":"6","C:\\Repos\\PersonalWebsite\\src\\components\\music\\visualizer.js":"7","C:\\Repos\\PersonalWebsite\\src\\components\\music\\visualizerAnimations.js":"8","C:\\Repos\\PersonalWebsite\\src\\components\\music\\custom-controls.js":"9"},{"size":528,"mtime":1608269241732,"results":"10","hashOfConfig":"11"},{"size":375,"mtime":1608268792280,"results":"12","hashOfConfig":"11"},{"size":2103,"mtime":1643386197818,"results":"13","hashOfConfig":"11"},{"size":1271,"mtime":1642966734653,"results":"14","hashOfConfig":"11"},{"size":296,"mtime":1643134150060,"results":"15","hashOfConfig":"11"},{"size":2715,"mtime":1643236506581,"results":"16","hashOfConfig":"11"},{"size":4665,"mtime":1643397735978,"results":"17","hashOfConfig":"11"},{"size":2872,"mtime":1643397798176,"results":"18","hashOfConfig":"11"},{"size":7948,"mtime":1643235352875,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"vljxmp",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},"C:\\Repos\\PersonalWebsite\\src\\index.js",[],["41","42"],"C:\\Repos\\PersonalWebsite\\src\\reportWebVitals.js",[],"C:\\Repos\\PersonalWebsite\\src\\components\\App.js",[],"C:\\Repos\\PersonalWebsite\\src\\components\\about\\about.js",[],"C:\\Repos\\PersonalWebsite\\src\\components\\music\\music.js",[],"C:\\Repos\\PersonalWebsite\\src\\components\\music\\music-player.js",["43","44","45"],"import { useRef, useEffect, useState } from \"react\";\r\nimport \"./music-player.css\";\r\nimport Visualizer from \"./visualizer\";\r\nimport CustomControls from \"./custom-controls\";\r\n\r\n// A Place to Call Home\r\nimport aPlaceToCallHomeUrl from \"../../assets/audio/A-Place-to-Call-Home.mp3\"\r\nimport aPlaceToCallHomeImgUrl from \"../../assets/images/A-Place-to-Call-Home.jpg\"\r\n// Comet\r\nimport cometUrl from \"../../assets/audio/Comet.mp3\"\r\nimport cometImgUrl from \"../../assets/images/Comet.jpg\"\r\n// Smile\r\nimport smileUrl from \"../../assets/audio/Smile.mp3\"\r\nimport smileImgUrl from \"../../assets/images/Smile.jpg\"\r\n// A Trail Under the Stars\r\nimport aTrailUnderTheStarsUrl from \"../../assets/audio/A-Trail-Under-the-Stars.mp3\";\r\nimport aTrailUnderTheStarsImgUrl from \"../../assets/images/A-Trail-Under-the-Stars.jpg\";\r\n\r\nexport default function MusicPlayer() {\r\n\r\n    const songArr = [ //important: tracklist goes in order\r\n        {\r\n            \"title\": \"A Place to Call Home\", \r\n            \"artist\": \"X.O\",\r\n            \"audio\": aPlaceToCallHomeUrl, \r\n            \"image\": aPlaceToCallHomeImgUrl,\r\n            \"about\": \"The reason I wrote this song was actually pretty cheesy. My girlfriend went to South Korea to study abroad and since she was feeling nervous, I wanted to make a song that would make her feel better. Unfortunately, I was only actually able to complete this song well after she got back. Nonetheless I put all the feelings I had back then and put them into this song.\"\r\n        },\r\n        {\r\n            \"title\": \"Comet\",\r\n            \"artist\": \"X.O\",\r\n            \"audio\": cometUrl, \r\n            \"image\": cometImgUrl,\r\n            \"about\": \"This song was written when I was thinking about past experiences with friends and how we've all grown up since then. It's a bittersweet song about those fleeting moments and how much you should cherish them.\"\r\n        },\r\n        {\r\n            \"title\": \"Smile\",\r\n            \"artist\": \"X.O\",\r\n            \"audio\": smileUrl, \r\n            \"image\": smileImgUrl,\r\n            \"about\": \"I actually wrote this one to cheer myself up. Things weren't working out as I hoped and I got into a little bit of a slump. I watched Kiki's Delivery Service and something about that inspired me to make this song to remind myself to smile. Hence the sound clips and album art.\"\r\n        },\r\n        {\r\n            \"title\": \"A Trail Under the Stars\",\r\n            \"artist\": \"X.O\",\r\n            \"audio\": aTrailUnderTheStarsUrl, \r\n            \"image\": aTrailUnderTheStarsImgUrl,\r\n            \"about\": \"\"\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <CustomControls tracks={songArr}/>\r\n            <Visualizer visualizerStyle={{}}/>\r\n        </>\r\n        \r\n    );\r\n}","C:\\Repos\\PersonalWebsite\\src\\components\\music\\visualizer.js",["46"],"C:\\Repos\\PersonalWebsite\\src\\components\\music\\visualizerAnimations.js",[],"C:\\Repos\\PersonalWebsite\\src\\components\\music\\custom-controls.js",["47"],"import React from \"react\";\r\nimport \"./custom-controls.css\";\r\n\r\nexport default class CustomControls extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.trackIndex = 0; //start from the first track\r\n        this.tracks = props.tracks;\r\n        this.audioElem = null;\r\n        this.prevButton = null;\r\n        this.nextButton = null;\r\n        this.playButton = null;\r\n        this.pauseButton = null;\r\n        this.timeSlider = null;\r\n        //time listener\r\n        this.timeListener = null;\r\n\r\n        this.state = {\r\n            playing: false,\r\n            currentTrack: this.tracks[this.trackIndex],\r\n            autoPlay: false,\r\n            shuffle: false,\r\n            duration: 0,\r\n            currentTime: 0,\r\n            currentTimeString: \"0:00 / 0:00\"\r\n        }\r\n\r\n        //bind for scope\r\n        this.previousSong = this.previousSong.bind(this);\r\n        this.loadAndPlay = this.loadAndPlay.bind(this);\r\n        this.playSong = this.playSong.bind(this);\r\n        this.pauseSong = this.pauseSong.bind(this);\r\n        this.nextSong = this.nextSong.bind(this);\r\n        this.updateTime = this.updateTime.bind(this);\r\n        this.setRepeat = this.setRepeat.bind(this);\r\n        this.setShuffle = this.setShuffle.bind(this);\r\n        this.goToTrack = this.goToTrack.bind(this);\r\n        this.setTime = this.setTime.bind(this);\r\n        this.handleEnded = this.handleEnded.bind(this);\r\n        console.log(this.tracks);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.audioElem = document.getElementById(\"src\");\r\n        this.prevButton = document.getElementById(\"prev\");\r\n        this.nextButton = document.getElementById(\"next\");\r\n        this.playButton = document.getElementById(\"play\");\r\n        this.pauseButton = document.getElementById(\"pause\");\r\n\r\n        this.timeSlider = document.getElementById(\"time-slider\");\r\n    }\r\n\r\n    //note: updateTimer will make this function run every second\r\n    componentDidUpdate() {\r\n    }\r\n\r\n    /**\r\n     * We should be able to skip back to start of song if user goes to previous song after a certain threshold.\r\n     */\r\n    previousSong() {\r\n        let thresholdToSkip = 2; // this is in seconds\r\n        if (this.audioElem.currentTime > thresholdToSkip){\r\n            this.audioElem.currentTime = 0;\r\n        } else {\r\n            if (this.trackIndex - 1 >= 0) {\r\n                this.trackIndex = this.trackIndex - 1\r\n            } else {\r\n                this.trackIndex = this.tracks.length - 1;\r\n            }\r\n            this.setState({\r\n                playing: false,\r\n                currentTrack: this.tracks[this.trackIndex]\r\n            });\r\n        }\r\n        \r\n        // console.log(\"previous song\", this.state.currentTrackURL, this.trackIndex);\r\n    }\r\n\r\n    loadAndPlay() {\r\n        let waitForLoad = setInterval(()=> {\r\n            console.log(\"loading\");\r\n            if (this.audioElem.readyState > 1) {\r\n                console.log(\"loaded\");\r\n                this.playSong();\r\n                clearInterval(waitForLoad);\r\n            }\r\n        }, 0)\r\n    }\r\n\r\n    nextSong() {\r\n        if (this.trackIndex + 1 < this.tracks.length) {\r\n            this.trackIndex = this.trackIndex + 1\r\n        } else {\r\n            this.trackIndex = 0;\r\n        }\r\n        this.setState({\r\n            playing: false,\r\n            currentTrack: this.tracks[this.trackIndex]\r\n        });\r\n        \r\n        if (this.state.autoPlay){\r\n            this.loadAndPlay();\r\n        }\r\n\r\n    }\r\n\r\n    playSong() {\r\n        this.setState({\r\n            playing: true\r\n        });\r\n        this.audioElem.play();\r\n        console.log(\"playing song\", this.state.currentTrack, this.trackIndex);\r\n    }\r\n\r\n    pauseSong() {\r\n        this.setState({\r\n            playing: false\r\n        });\r\n        this.audioElem.pause();\r\n        console.log(\"pause song\");\r\n    }\r\n\r\n    setTime() {\r\n        this.audioElem.currentTime = this.timeSlider.value / 1000; //we divide by 1000 because time in slider is in milliseconds, while element accepts seconds\r\n    }\r\n\r\n    setRepeat() {\r\n        this.setState({\r\n            autoPlay: !this.state.autoPlay\r\n        });\r\n    }\r\n\r\n    setShuffle() {\r\n        this.setState({\r\n            shuffle: !this.state.shuffle\r\n        });\r\n    }\r\n\r\n    goToTrack(newTrackIndex) {\r\n        this.trackIndex = newTrackIndex;\r\n        this.setState({\r\n            currentTrack: this.tracks[this.trackIndex]\r\n        });\r\n    }\r\n\r\n    updateTime() {\r\n        clearInterval(this.timeListener);\r\n        this.timeListener = setInterval(() => {\r\n            let currentTime = this.audioElem.currentTime;\r\n            let duration = this.audioElem.duration;\r\n            let formattedCurrentTime = `${~~(currentTime / 60)}:${(\"0\" + (~~currentTime % 60)).slice(-2)}`;\r\n            let formattedDuration = `${~~(duration / 60)}:${(\"0\" + (~~duration % 60)).slice(-2)}`;\r\n            this.setState({\r\n                duration: duration * 1000, //multiply by 1000 for smoother movement in the slider\r\n                currentTime: currentTime * 1000, //multiply by 1000 for smoother movement in the slider\r\n                currentTimeString: `${formattedCurrentTime} / ${formattedDuration}`\r\n            });\r\n        }, 100)\r\n    }\r\n\r\n    handleEnded() {\r\n        if (this.state.autoPlay) {\r\n            this.nextSong();\r\n            this.loadAndPlay();\r\n        } else {\r\n            this.pauseSong();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <audio id=\"src\" src={this.state.currentTrack.audio} onLoadedMetadata={this.updateTime} onEnded={this.handleEnded}/>\r\n                <div className=\"image-container\">\r\n                    <div className=\"spacer\">&nbsp;</div>\r\n                    <img id=\"album-art\" src={this.state.currentTrack.image}></img>\r\n                    <h2 className=\"title\">{this.state.currentTrack.title}</h2>\r\n                </div>\r\n                <div id=\"custom-controls\" className=\"custom-controls-container\">\r\n                    <div className=\"custom-controls-buttons\">\r\n                        <div className=\"button-group\">\r\n                        </div>\r\n                        <div className=\"button-group\">\r\n                            <button id=\"prev\" className=\"prev-button\" onClick={this.previousSong}><i className=\"fa fa-step-backward\" aria-hidden=\"true\"></i></button>\r\n                            <button id=\"play\" className=\"play-button\" onClick={this.playSong} style={{display: this.state.playing ? \"none\" : \"inline-block\"}}><i  className=\"fas fa-play\" aria-hidden=\"true\"></i></button>\r\n                            <button id=\"pause\" className=\"pause-button\" onClick={this.pauseSong} style={{display: this.state.playing ? \"inline-block\" : \"none\"}}><i className=\"fa fa-pause\" aria-hidden=\"true\"></i></button>\r\n                            <button id=\"next\" className=\"next-button\" onClick={this.nextSong}><i className=\"fa fa-step-forward\" aria-hidden=\"true\"></i></button>\r\n                        </div>\r\n                        <div className=\"button-group\">\r\n                            <div>\r\n                                <button id=\"repeat\" className={this.state.autoPlay ? \"repeat-button selected\" : \"repeat-button\"} onClick={this.setRepeat}><i className=\"fa-solid fa-repeat\"></i></button>\r\n                                <button id=\"playlist\" className=\"playlist-toggle\"><i className=\"fas fa-list\"></i></button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"custom-controls-track\">\r\n                        <span id=\"current-time\">{this.state.currentTimeString}</span>\r\n                        <input id=\"time-slider\" type=\"range\" min=\"0\" max={(this.state.duration) ? this.state.duration : 0} value={this.state.currentTime} onChange={this.setTime}/>\r\n                    </div>\r\n                </div>\r\n            </>\r\n            \r\n        );\r\n    }\r\n\r\n}",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":1,"column":10,"nodeType":"54","messageId":"55","endLine":1,"endColumn":16},{"ruleId":"52","severity":1,"message":"56","line":1,"column":18,"nodeType":"54","messageId":"55","endLine":1,"endColumn":27},{"ruleId":"52","severity":1,"message":"57","line":1,"column":29,"nodeType":"54","messageId":"55","endLine":1,"endColumn":37},{"ruleId":"58","severity":1,"message":"59","line":39,"column":26,"nodeType":"60","messageId":"61","endLine":39,"endColumn":28},{"ruleId":"62","severity":1,"message":"63","line":177,"column":21,"nodeType":"64","endLine":177,"endColumn":77},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]